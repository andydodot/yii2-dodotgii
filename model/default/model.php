<?php
/**
 * This is the template for generating the model class of a specified table.
 * DO NOT EDIT THIS FILE! It may be regenerated with Gii.
 *
 * @var yii\web\View $this
 * @var yii\gii\generators\model\Generator $generator
 * @var string $tableName full table name
 * @var string $className class name
 * @var yii\db\TableSchema $tableSchema
 * @var string[] $labels list of attribute labels (name => label)
 * @var string[] $rules list of validation rules
 * @var array $relations list of relations (name => relation declaration)
 */

echo "<?php\n";
?>

namespace <?= $generator->ns ?>\base;

use Yii;
<?php if($generator->createdAt || $generator->updatedAt): ?>
use yii\behaviors\TimestampBehavior;
<?php endif; ?>
<?php if($generator->createdBy || $generator->updatedBy): ?>
use yii\behaviors\BlameableBehavior;
<?php endif; ?>
<?php if($generator->createdTerminal || $generator->updatedTerminal): ?>
use andydodot\dodotgii\behaviors\TerminalBehavior;
<?php endif; ?>

/**
 * This is the base-model class for table "<?= $tableName ?>".
 *
<?php foreach ($tableSchema->columns as $column): ?>
 * @property <?= "{$column->phpType} \${$column->name}\n" ?>
<?php endforeach; ?>
<?php if (!empty($relations)): ?>
 *
<?php foreach ($relations as $name => $relation): ?>
 * @property \<?=$ns?>\<?= $relation[1] . ($relation[2] ? '[]' : '') . ' $' . lcfirst($name) . "\n" ?>
<?php endforeach; ?>
<?php endif; ?>
 */
class <?= $className ?> extends <?= '\\' . ltrim($generator->baseClass, '\\') . "\n" ?>
{

<?php
if(!empty($enum)){
?>
    /**
    * ENUM field values
    */
<?php
    foreach($enum as $column_name => $column_data){
        foreach ($column_data['values'] as $enum_value){
            echo '    const ' . $enum_value['const_name'] . ' = \'' . $enum_value['value'] . '\';' . PHP_EOL;
        }
    }
?>    
    var $enum_labels = false;  
<?php    
}
?>
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return '<?= $tableName ?>';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [<?= "\n            " . implode(",\n            ", $rules) . "\n        " ?>];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
<?php foreach ($labels as $name => $label): ?>
            <?= "'$name' => " . $generator->generateString($label) . ",\n" ?>
<?php endforeach; ?>
        ];
    }
<?php foreach ($relations as $name => $relation): ?>

    /**
     * @return \yii\db\ActiveQuery
     */
    public function get<?= $name ?>()
    {
        <?= $relation[0] . "\n" ?>
    }
<?php endforeach; ?>

<?php if ($generator->createdAt || $generator->updatedAt
        || $generator->createdBy || $generator->updatedBy) : 
		
    echo "\n";?>/**
     * @inheritdoc
     * @return type array
     */ 
    public function behaviors()
    {
        return [
<?php if($generator->createdAt || $generator->updatedAt):?>
            [
                'class' => TimestampBehavior::className(),
<?php if(!empty($generator->createdAt)):?>
                'createdAtAttribute' => '<?= $generator->createdAt?>',
<?php else :?>
                'createdAtAttribute' => false,
<?php endif;?>
<?php if(!empty($generator->updatedAt)):?>
                'updatedAtAttribute' => '<?= $generator->updatedAt?>',
<?php else :?>
                'updatedAtAttribute' => false,
<?php endif;?>
<?php if(!empty($generator->timestampValue) && $generator->timestampValue != 'time()'):?>
                'value' => <?= $generator->timestampValue?>,
<?php endif;?>
            ],
<?php endif;?>
<?php if($generator->createdBy || $generator->updatedBy):?>
            [
                'class' => BlameableBehavior::className(),
<?php if(!empty($generator->createdBy)):?>
                'createdByAttribute' => '<?= $generator->createdBy?>',
<?php else :?>
                'createdByAttribute' => false,
<?php endif;?>
<?php if(!empty($generator->updatedBy)):?>
                'updatedByAttribute' => '<?= $generator->updatedBy?>',
<?php else :?>
                'updatedByAttribute' => false,
<?php endif;?>
<?php if(!empty($generator->blameableValue) && $generator->blameableValue != '\\Yii::$app->user->id'):?>
                'value' => <?= $generator->blameableValue?>,
<?php endif;?>
            ],
<?php endif;?>
<?php if($generator->createdTerminal || $generator->updatedTerminal):?>
            [
                'class' => TerminalBehavior::className(),
<?php if(!empty($generator->createdTerminal)):?>
                'createdTerminalAttribute' => '<?= $generator->createdTerminal?>',
<?php else :?>
                'createdTerminalAttribute' => false,
<?php endif;?>
<?php if(!empty($generator->updatedTerminal)):?>
                'updatedTerminalAttribute' => '<?= $generator->updatedTerminal?>',
<?php else :?>
                'updatedTerminalAttribute' => false,
<?php endif;?>
<?php if(!empty($generator->terminalValue) && $generator->terminalValue != '\\Yii::$app->request->userIP'):?>
                'value' => <?= $generator->terminalValue?>,
<?php endif;?>
            ],
<?php endif;?>
        ];
    }
<?php endif; ?>

<?php if ($queryClassName): ?>
    <?php
    $queryClassFullName = ($generator->ns === $generator->queryNs) ? $queryClassName : '\\' . $generator->queryNs . '\\' . $queryClassName;
    echo "\n";
    ?>
    /**
     * @inheritdoc
     * @return <?= $queryClassFullName ?> the active query used by this AR class.
     */
    public static function find()
    {
        return new <?= $queryClassFullName ?>(get_called_class());
    }
<?php endif; ?>

<?php
    foreach($enum as $column_name => $column_data){
?>
    
    /**
     * get column <?php echo $column_name?> enum value label 
     * @param string $value
     * @return string
     */
    public static function <?php echo $column_data['func_get_label_name']?>($value){
        $labels = self::<?php echo $column_data['func_opts_name']?>();
        if(isset($labels[$value])){
            return $labels[$value];
        }
        return $value;
    }
   
    /**
     * column <?php echo $column_name?> ENUM value labels
     * @return array
     */    
    public static function <?php echo $column_data['func_opts_name']?>()
    {
        return [
<?php
        foreach($column_data['values'] as $k => $value){
?>
            self::<?php echo $value['const_name'];?> => <?php echo $generator->generateString($value['label'])?>,
<?php            
        }
?>        
        ];
    }
<?php    
    }


?>
    
}
